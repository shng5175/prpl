.coverity scan config:
  stage: coverity
  image: "$CI_REGISTRY_IMAGE/$CI_DESIGNATED_BRANCH/builder:latest"
  tags:
    - firmware-builder
  dependencies: []
  variables:
    CI_BUILD_CONFIG: >
      +DEVEL +BUILD_LOG +ALL +ALL_KMODS +ALL_NONSHARED
    CI_COVERITY_PROJECT_NAME: prplOS
    CI_COVERITY_FORCE_COMPILE_PACKAGE_LIST: >
      curl
      libnl
      mbedtls
      openssl
    CI_COVERITY_OPENWRT_PACKAGE_LIST: >
      cgi-io
      dropbear
      dnsmasq
      firewall
      fstools
      iwinfo
      jsonfilter
      libnl-tiny
      libubox
      netifd
      odhcp6c
      odhcpd
      opkg
      procd
      rpcd
      swconfig
      ubox
      ubus
      ucert
      uci
      uclient
      uhttpd
      umdns
      usign
      ustream-ssl
    CI_COVERITY_PRPLOS_PACKAGE_LIST: >
      acl-manager
      amxb-inspect
      amx-cli
      amx-fcgi
      amxo-cg
      amxrt
      bbfd
      deviceinfo-manager
      dhcpv4-manager
      dhcpv6s-manager
      ethernet-manager
      gmap-mibs-common
      gmap-mod-ethernet-dev
      gmap-mod-name-selector
      gmap-mod-self
      gmap-server
      ip-manager
      libamxa
      libamxb
      libamxc
      libamxd
      libamxj
      libamxm
      libamxo
      libamxp
      libamxs
      libamxt
      libdhcpoptions
      libfwinterface
      libfwrules
      libgmap-client
      libnetmodel
      libsahtrace
      libtrace
      moca-manager
      mod-amxb-ubus
      mod-ba-cli
      mod-dm-cli
      mod-dmext
      mod-dmproxy
      mod-dmstats
      mod-netmodel
      mod-pcm-svc
      mod-sahtrace
      mod-vlan-ioctl
      mod-vlan-uci
      netdev-plugin
      netmodel
      netmodel-ip
      obuspa
      owsd
      pcm-manager
      prplmesh
      routing-manager
      time-manager
      tr181-bridging
      tr181-device
      tr181-dhcpv4client
      tr181-dhcpv6client
      tr181-firewall
      tr181-qos
      tr181-routeradvertisement
      tr181-usermanagement
      ucwmp
      umdns
      uriparser
      wan-autosensing
      wan-manager

  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

  script:
    - mkdir logs
    - set -o pipefail

    - export CI_BUILD_PROFILE="$(echo $CI_JOB_NAME | sed 's/coverity scan \(.*\)/\1/')"
    - scripts/gen_config.py $CI_BUILD_PROFILE 2>&1 | tee logs/build.log
    - >
      for option in $CI_BUILD_CONFIG $CI_BUILD_CONFIG_EXTRA; do
        echo "$option" | sed -E "s/^\+(.*)$/CONFIG_\1=y/;s/^\-(.*)$/CONFIG_\1=n/" >> .config
      done
    - cat .config
    - make defconfig | tee --append logs/build.log

    - wget -q https://scan.coverity.com/download/linux64 --post-data "token=$COVERITY_PROJECT_TOKEN&project=$CI_COVERITY_PROJECT_NAME" -O coverity.tar.gz
    - wget -q https://scan.coverity.com/download/linux64 --post-data "token=$COVERITY_PROJECT_TOKEN&project=$CI_COVERITY_PROJECT_NAME&md5=1" -O coverity.tar.gz.md5
    - echo ' coverity.tar.gz' >> coverity.tar.gz.md5
    - md5sum -c coverity.tar.gz.md5

    - mkdir cov-analysis-linux64
    - tar xzf coverity.tar.gz --strip 1 -C cov-analysis-linux64
    - export PATH=$(pwd)/cov-analysis-linux64/bin:$PATH
    - >
      for template in $CI_COVERITY_COMPILER_TEMPLATE_LIST; do
        cov-configure --template --comptype gcc --compiler $template
      done

    - make -j $(nproc) tools/tar/compile || make -j1 V=s tools/tar/compile 2>&1 | tee --append logs/build.log
    - make -j $(nproc) download check FIXUP=1 || make -j1 V=s download check FIXUP=1 2>&1 | tee --append logs/build.log
    - make -j $(nproc) || make -j1 V=s 2>&1 | tee --append logs/build.log

    - printf -v clean_packages "package/%s/clean " ${CI_COVERITY_OPENWRT_PACKAGE_LIST[@]} ${CI_COVERITY_PRPLOS_PACKAGE_LIST[@]}
    - make $clean_packages

    - printf -v force_compile_packages "package/%s/compile " ${CI_COVERITY_FORCE_COMPILE_PACKAGE_LIST[@]}
    - make -j $(nproc) $force_compile_packages

    - echo "$COVERITY_PROJECT_TOKEN" > ./coverity-api-token
    - >
      unset
      CI_JOB_JWT
      CI_JOB_TOKEN
      CI_BUILD_TOKEN
      CI_RUNNER_SHORT_TOKEN
      CI_DEPENDENCY_PROXY_PASSWORD
      CI_REPOSITORY_URL
      CI_REGISTRY_PASSWORD
      TESTBED_SSH_PRIVATE_KEY
      COVERITY_PROJECT_TOKEN

    - printf -v compile_packages "package/%s/compile " ${CI_COVERITY_OPENWRT_PACKAGE_LIST[@]} ${CI_COVERITY_PRPLOS_PACKAGE_LIST[@]}
    - cov-build --dir cov-int make -j $(nproc) $compile_packages

    - tar czf cov-int.tar.gz ./cov-int
    - >
      curl
      --form token="$(cat ./coverity-api-token)"
      --form email=ynezz@true.cz
      --form file=@cov-int.tar.gz
      --form version="$CI_COMMIT_SHORT_SHA"
      --form description="$CI_COMMIT_REF_SLUG"
      "https://scan.coverity.com/builds?project=$CI_COVERITY_PROJECT_NAME"

  artifacts:
    expire_in: 1 month
    when: always
    paths:
      - bin
      - logs
      - cov-int.tar.gz

  cache:
    key: openwrt-downloads
    paths:
      - dl/
